# -*- coding: utf-8 -*-
"""Base Paper FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K0nIAvof-aZZ4h_UGtnD2Q5pDU_dnwRt
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.applications import InceptionV3,VGG19, ResNet50
# from tensorflow.keras.applications import VGG19
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten,Conv2D, MaxPooling2D,Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential,load_model
import numpy as np
import plotly.graph_objects as go

train_datagen = ImageDataGenerator(rescale = 1./255,validation_split=0.1)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/DDD/Garbage classification/',
                                                 target_size = (50, 50),
                                                 batch_size = 32,
                                                 class_mode = 'categorical',
                                                 subset = 'training')
validation_set = train_datagen.flow_from_directory('/content/drive/MyDrive/DDD/Garbage classification/',
                                                 target_size = (50, 50),
                                                 batch_size = 32,
                                                 class_mode = 'categorical',
                                                 subset = 'validation')

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(50, 50, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(4, activation='softmax'))

model.compile(optimizer= 'adam', loss= 'categorical_crossentropy', metrics=['accuracy'])

model.summary()

history=model.fit(training_set, validation_data=validation_set, epochs=200)

fig = go.Figure()
fig.add_trace(go.Scatter(
                    y=history.history['accuracy'],
                    name='Train'))
fig.add_trace(go.Scatter(
                    y=history.history['val_accuracy'],
                    name='Valid'))
fig.update_layout(height=500, 
                  width=700,
                  title='Accuracy',
                  xaxis_title='Epoch',
                  yaxis_title='Accuracy')
fig.show()

import visualkeras

model = history

visualkeras.layered_view(model).show() # display using your system viewer
visualkeras.layered_view(model, to_file='output.png') # write to disk
visualkeras.layered_view(model, to_file='output.png').show() # write and show

visualkeras.layered_view(model)

